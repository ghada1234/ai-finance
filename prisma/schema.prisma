// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  transactions  Transaction[]
  budgets       Budget[]
  categories    Category[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id          String   @id @default(cuid())
  name        String
  type        AccountType
  balance     Decimal  @default(0)
  currency    String   @default("USD")
  isDefault   Boolean  @default(false)
  color       String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Decimal
  type        TransactionType
  description String
  date        DateTime
  categoryId  String?
  isRecurring Boolean  @default(false)
  recurringId String?
  receiptUrl  String?
  aiProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String
  icon        String?
  type        TransactionType
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets     Budget[]

  @@map("categories")
}

model Budget {
  id          String   @id @default(cuid())
  name        String
  amount      Decimal
  spent       Decimal  @default(0)
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("budgets")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
